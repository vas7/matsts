#!/usr/bin/env python
# -*- encoding: utf-8 -*-

# matsts [OPTIONS] <exefile> <testfile>

from sys import argv
from subprocess import call
import inspect
import matsts_parser
import matsts_foo

class FooNameError(Exception):
	pass

testfile = open(argv[2], 'r');

external_functions = dict(inspect.getmembers(matsts_foo, inspect.isfunction))

identity = lambda x: x

for line in testfile:
	arr = line.rstrip().split('\t')

	iternumber = 1
	i = 0
	while i < len(arr):
		foo_name = matsts_parser.getFooName(arr[i])
		if foo_name == '':
			arr[i] = (identity, (arr[i],))
		elif foo_name in external_functions:
			foo_args = matsts_parser.fooParse(arr[i])
			arr[i] = (external_functions[foo_name], foo_args)
		elif foo_name == 'repeat':
			iternumber = matsts_parser.fooParse(arr[i])[0]
			arr.pop(i)
			continue
		else:
			raise matsts_parser.FooNameError(foo_name)
		i += 1

	for i in xrange(iternumber):
		command = [argv[1]]
		for e in arr:
			command.append(str(e[0](*e[1])))
		call(command)

testfile.close();
exit(0);
